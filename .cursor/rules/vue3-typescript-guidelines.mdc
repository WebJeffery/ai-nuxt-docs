---
description: 
globs: 
alwaysApply: false
---
# Vue3 + TypeScript 开发规范

## 组件开发规范

### 1. 使用 `<script setup>` 语法
```vue
<script setup lang="ts">
// 导入
import { ref, computed } from 'vue'
import type { PropType } from 'vue'

// Props 定义
interface Props {
  title: string
  count?: number
  items: string[]
}

const props = withDefaults(defineProps<Props>(), {
  count: 0
})

// Emits 定义
interface Emits {
  update: [value: string]
  delete: [id: number]
}

const emit = defineEmits<Emits>()

// 响应式数据
const count = ref(0)
const doubleCount = computed(() => count.value * 2)

// 方法
const handleClick = () => {
  emit('update', 'new value')
}
</script>
```

### 2. 类型安全原则
- 所有props必须定义TypeScript接口
- 所有emits必须定义类型
- 使用`PropType`处理复杂类型
- 避免使用`any`类型

### 3. 组件命名规范
- 组件文件名使用PascalCase
- 组件名应该具有描述性
- 页面组件放在`pages/`目录
- 通用组件放在`components/`目录

### 4. 组合式函数规范
- 使用`use`前缀命名
- 返回响应式数据和方法
- 在[composables/](mdc:composables)目录中定义
- 提供完整的TypeScript类型

## 代码质量要求
- 使用ESLint进行代码检查
- 遵循Vue3官方最佳实践
- 添加详细的中文注释
- 保持代码简洁和可维护性
